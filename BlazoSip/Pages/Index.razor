@page "/"

@inject IJSRuntime JS

<h3 class="mb-4">📞 SIP Softphone</h3>

@if (!string.IsNullOrEmpty(Status))
{
    <div class="alert alert-info" role="alert">@Status</div>
}

<div class="row g-4 mb-4">
    <!-- Registration Card (left column) -->
    <div class="col-12 col-md-6">
        <div class="card shadow-sm h-100">
            <div class="card-header">
                <strong>Account Registration</strong>
            </div>
            <div class="card-body d-flex flex-column">
                <div class="mb-3">
                    <label for="extensionInput" class="form-label">Extension</label>
                    <input id="extensionInput" @bind="Extension" class="form-control" placeholder="Enter extension" />
                </div>
                <div class="mb-3">
                    <label for="passwordInput" class="form-label">Password</label>
                    <input id="passwordInput" @bind="Password" type="password" class="form-control" placeholder="Enter password" />
                </div>
                <div class="mb-3">
                    <label for="domainInput" class="form-label">Domain</label>
                    <input id="domainInput" @bind="Domain" class="form-control" placeholder="Enter domain" />
                </div>
                <div class="mb-3">
                    <label for="wsUriInput" class="form-label">WebSocket URI</label>
                    <input id="wsUriInput" @bind="WebSocketUri" class="form-control" placeholder="wss://yourserver:port" />
                </div>
                <button class="btn btn-primary mt-auto w-100" @onclick="Register">Register</button>
            </div>
        </div>
    </div>

    <!-- Call Controls Card (right column) -->
    @if (IsRegistered)
    {
        <div class="col-12 col-md-6">
            <div class="card shadow-sm h-100">
                <div class="card-header">
                    <strong>Call Controls</strong>
                </div>
                <div class="card-body d-flex flex-column">
                    <div class="mb-3">
                        <label for="targetExtInput" class="form-label">Call Extension</label>
                        <input id="targetExtInput" @bind="TargetExtension" class="form-control" placeholder="Enter extension to call" />
                    </div>
                    <div class="d-flex gap-2 flex-wrap mt-auto">
                        <button class="btn btn-success flex-grow-1" @onclick="Call"> 📞Call</button>
                        <button class="btn btn-danger flex-grow-1" @onclick="HangUp">Hang Up</button>
                        <button class="btn btn-warning flex-grow-1" @onclick="ToggleMute">Mute / Unmute</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (IsIncomingCall)
{
    <!-- Incoming Call Modal Card -->
    <div class="modal show d-block" tabindex="-1" aria-modal="true" role="dialog" style="background-color: rgba(0,0,0,0.4);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="card border-warning shadow modal-content">
                <div class="card-header bg-warning text-dark">
                    <h5 class="modal-title mb-0">📞 Incoming Call</h5>
                </div>
                <div class="card-body">
                    <p>Incoming Caller Number <strong>@IncomingCaller</strong> is calling you.</p>
                </div>
                <div class="card-footer d-flex gap-2">
                    <button class="btn btn-success flex-grow-1" @onclick="AnswerCall">Answer</button>
                    <button class="btn btn-danger flex-grow-1" @onclick="RejectCall">Reject</button>
                </div>
            </div>
        </div>
    </div>
}

@if (IsInCall)
{
    <div class="card shadow border-success p-3 mt-3 mb-2">
        <div class="card-body text-center">
            <h5 class="text-success">📞 In Call</h5>
            <p>Call Duration: <strong>@CallDuration</strong></p>
            <div class="d-flex gap-2 justify-content-center mt-3">
                <button class="btn btn-warning" @onclick="ToggleMute">
                    @(IsMuted ? "Unmute" : "Mute")
                </button>
                <button class="btn btn-danger" @onclick="RejectCall">Hang Up</button>
            </div>
        </div>
    </div>
}

<!-- Call History Card -->
<div class="card shadow-sm">
    <div class="card-header">
        <strong>📜 Call History</strong>
    </div>
    <div class="card-body p-0">
        @if (CallLogs.Any())
        {
            <div class="table-responsive">
                <table class="table table-striped table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th scope="col">Time</th>
                            <th scope="col">Direction</th>
                            <th scope="col">Number</th>
                            <th scope="col">Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var log in CallLogs)
                        {
                            <tr>
                                <td>@log.Time</td>
                                <td>@log.Direction</td>
                                <td>@log.Number</td>
                                <td>@log.Status</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p class="text-center text-muted fst-italic my-3">No call history yet.</p>
        }
    </div>
</div>



<audio id="remoteAudio" autoplay></audio>

@code {
    public string Extension { get; set; } = "100";
    public string Password { get; set; } = "Admin@123";
    public string Domain { get; set; } = "192.168.100.20";
    public string WebSocketUri { get; set; } = "wss://192.168.100.20:8089/ws";
    public string TargetExtension { get; set; } = "101";
    public bool IsRegistered { get; set; }
    public string? Status { get; set; }
    public bool IsIncomingCall { get; set; }
    public string IncomingCaller { get; set; }
    public List<CallLog> CallLogs { get; set; } = new();
    private static Index? _instance;

    private bool IsInCall = false;
    private bool IsMuted = false;
    private string CallDuration = "00:00";
    private Timer? callTimer;
    private DateTime CallStartTime;

    protected override void OnInitialized()
    {
        _instance = this;
    }

    private async Task Register()
    {
        Status = "Registering...";
        var dotNetRef = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("initializeJsSip", new
        {
            extension = Extension,
            password = Password,
            domain = Domain,
            websocket = WebSocketUri,
            dotNetRef = dotNetRef
        });
    }

    private async Task Call() => await JS.InvokeVoidAsync("makeCall", TargetExtension);
    private async Task HangUp() => await JS.InvokeVoidAsync("hangUp");
    private async Task ToggleMute() => await JS.InvokeVoidAsync("toggleMute");

    [JSInvokable]
    public async Task OnRegistered()
    {
        IsRegistered = true;
        Status = "✅ Registered";
        StateHasChanged(); // Force UI to refresh
        await Task.CompletedTask;
    }

    [JSInvokable]
    public async Task OnRegistrationFailed(string reason)
    {
        IsRegistered = false;
        Status = $"❌ Registration failed: {reason}";
        StateHasChanged();
        await Task.CompletedTask;
    }

    [JSInvokable]
    public static Task OnIncomingCall(string caller = "")
    {
        if (_instance is not null)
        {
            _instance.IsIncomingCall = true;
            _instance.IncomingCaller = caller;
            _instance.InvokeAsync(_instance.StateHasChanged);
        }

        return Task.CompletedTask;
    }

    private async Task AnswerCall()
    {
        await JS.InvokeVoidAsync("sipInterop.answerCall");
        IsIncomingCall = false;
        IsInCall = true;

        CallStartTime = DateTime.Now;
        callTimer = new Timer(UpdateCallDuration, null, 0, 1000);
    }

    private void UpdateCallDuration(object? state)
    {
        var elapsed = DateTime.Now - CallStartTime;
        CallDuration = elapsed.ToString(@"mm\:ss");
        InvokeAsync(StateHasChanged);
    }

    private async Task RejectCall()
    {
        await JS.InvokeVoidAsync("sipInterop.rejectCall");
        IsIncomingCall = false;
        IsInCall = false;
        StateHasChanged();
    }
 
    [JSInvokable]
    public static Task OnCallFailed()
    {
        Console.WriteLine("❌ Call failed");
        return Task.CompletedTask;
    }

    [JSInvokable("OnCallConfirmed")]
    public static Task OnCallConfirmed()
    {
        _instance?.AddLog("Outgoing", _instance.TargetExtension, "Connected");
        _instance?.InvokeAsync(_instance.StateHasChanged);
        return Task.CompletedTask;
    }

    [JSInvokable("OnCallEnded")]
    public static Task OnCallEnded()
    {
        _instance?.AddLog("Call", _instance.TargetExtension, "Ended");
        _instance?.InvokeAsync(_instance.StateHasChanged);
        return Task.CompletedTask;
    }

    public void AddLog(string direction, string extension, string status)
    {
        CallLogs.Insert(0, new CallLog
            {
                Direction = direction,
                Number = extension,
                Status = status,
                Time = DateTime.Now
            });
    }
}